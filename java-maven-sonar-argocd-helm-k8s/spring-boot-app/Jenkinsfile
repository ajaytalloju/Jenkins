pipeline {
    agent {
        docker {
            image 'maven:3.8.6-openjdk-11-slim'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
        SONAR_URL = "http://68.233.116.7:9000"
        IMAGE_NAME = "ajaytalloju/my-maven-image:${BUILD_NUMBER}" // Use a unique name for the Docker image
        DOCKER_IMAGE = "ajaytalloju/ultimate-cicd:${BUILD_NUMBER}"
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'Checking out the code...'
                    // Uncomment to checkout the actual repository
                    // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
                }
            }
        }
        stage('Build and Test') {
            steps {
                script {
                    echo 'Building the project...'
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        sh 'mvn clean package'
                        echo 'Build completed. Listing target directory:'
                        sh 'ls -ltr target' // Verify the build outcome
                    }
                }
            }
        }
        stage('Static Code Analysis') {
            steps {
                script {
                    echo 'Performing static code analysis with SonarQube...'
                    withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                            sh '''
                                mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                            '''
                        }
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Creating Dockerfile and building Docker image...'
                    writeFile file: 'Dockerfile', text: '''
                    FROM openjdk:11-jdk-slim
                    RUN apt-get update && \
                        apt-get install -y maven docker.io && \
                        rm -rf /var/lib/apt/lists/*
                    '''
                    // Build the Docker image for Maven
                    sh "docker build -t ${IMAGE_NAME} ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    echo 'Logging into Docker Hub and pushing Docker image...'
                    sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                    sh "docker push ${IMAGE_NAME}"

                    // Build and push the second Docker image
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                        def dockerImage = docker.image("${DOCKER_IMAGE}")
                        docker.withRegistry('https://index.docker.io/v1/', "dockerhub-cred") {
                            dockerImage.push()
                        }
                    }
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                script {
                    echo 'Updating deployment file in Git...'
                    withCredentials([string(credentialsId: 'github-cred', variable: 'GITHUB_TOKEN')]) {
                        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests') {
                            sh '''
                                git config user.email "ajay.tallojugmail.com"
                                git config user.name "Ajay Talloju"
                                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
                                git add deployment.yml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/ajaytalloju/Jenkins HEAD:main
                            '''
                        }
                    }
                }
            }
        }
        stage('Test with Maven Docker Image') {
            agent {
                docker { image "${IMAGE_NAME}" }
            }
            steps {
                script {
                    echo 'Running tests within the Maven Docker image...'
                    sh 'mvn -version' // Verify Maven version
                }
            }
       
