pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
        IMAGE_NAME = 'ajaytalloju/myrepo:your-image-name' // Update this if necessary
    }
    stages {
        stage('Build Spring Boot Application') {
            steps {
                // Build the Spring Boot application
                sh 'mvn clean package'
            }
        }
        stage('List Files') {
            steps {
                // List files in the target directory to ensure the JAR is created
                sh 'ls -R target'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Define Dockerfile content and build Docker image
                    writeFile file: 'Dockerfile', text: '''
                    # Use OpenJDK 11 JRE on a slim Debian-based image as the base image
                    FROM openjdk:11-jre-slim

                    # Define the artifact path as a build argument
                    ARG artifact=target/spring-boot-web.jar

                    # Set the working directory inside the container
                    WORKDIR /opt/app

                    # Copy the artifact into the container
                    COPY ${artifact} app.jar

                    # Set the entry point for the container to run the Spring Boot application
                    ENTRYPOINT ["java", "-jar", "app.jar"]
                    '''
                    sh "docker build -t ${IMAGE_NAME} ."
                    
                    // Login and push the Docker image to Docker Hub
                    sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                    sh "docker push ${IMAGE_NAME}"
                }
            }
        }
        stage('Test with Docker Image') {
            agent {
                docker { image "${IMAGE_NAME}" }
            }
            steps {
                // Run tests within the Docker image
                sh 'java -version' // Testing the Java version instead
            }
        }
    }
}
