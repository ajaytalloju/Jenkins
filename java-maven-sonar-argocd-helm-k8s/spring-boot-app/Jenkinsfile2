pipeline {
    agent {
        docker {
            image 'ajaytalloju/maven-docker-agent'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
        SONAR_URL = "http://68.233.116.7:9000"
        IMAGE_NAME = "ajaytalloju/myrepo:maven-openjdk-${BUILD_NUMBER}"
        DOCKER_IMAGE = "ajaytalloju/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('dockerhub-cred')
        GIT_REPO_PATH = '/var/lib/jenkins/workspace/fp/java-maven-sonar-argocd-helm-k8s/spring-boot-app'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: 'https://github.com/ajaytalloju/Jenkins.git']]])
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    writeFile file: 'Dockerfile', text: '''
                        FROM openjdk:11-jre-slim
                        ARG artifact=java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/spring-boot-web.jar
                        WORKDIR /opt/app
                        COPY ${artifact} app.jar
                        ENTRYPOINT ["java", "-jar", "app.jar"]
                    '''
                    sh "docker build -t ${IMAGE_NAME} ."
                    
                    // Login and push the Docker image to Docker Hub
                    sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                    sh "docker push ${IMAGE_NAME}"
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins"
                GIT_USER_NAME = "ajaytalloju"
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-cred', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            # Mark the Jenkins workspace as a safe directory
                            git config --global --add safe.directory /var/lib/jenkins/workspace/fp

                            # Configure Git user information
                            git config --global user.email "ajay.talloju@gmail.com"
                            git config --global user.name "ajaytalloju"

                            # Ensure we're on the main branch
                            git checkout main

                            # Replace placeholder with the build number in the deployment file
                            BUILD_NUMBER=${BUILD_NUMBER}
                            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app/deployment.yml

                            # Stage only the deployment file and commit the changes
                            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app/deployment.yml
                            git commit --only java-maven-sonar-argocd-helm-k8s/spring-boot-app/deployment.yml -m "Update deployment image to version ${BUILD_NUMBER}"

                            # Push the changes to the GitHub repository
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
